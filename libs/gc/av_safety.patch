Index: msvc_dbg.c
===================================================================
--- msvc_dbg.c	(revision 1849)
+++ msvc_dbg.c	(working copy)
@@ -77,12 +77,8 @@
 		// Save and restore current directory around SymLoadModule, see KB article Q189780
 		GetCurrentDirectoryA(sizeof(curDir), curDir);
 		GetModuleFileNameA(NULL, exePath, sizeof(exePath));
-#if defined(_MSC_VER) && _MSC_VER == 1200
 		/* use strcat for VC6 */
 		strcat(exePath, "\\..");
-#else
-		strcat_s(exePath, sizeof(exePath), "\\..");
-#endif /* _MSC_VER >= 1200 */
 		SetCurrentDirectoryA(exePath);
 #ifdef _DEBUG
 		GetCurrentDirectoryA(sizeof(exePath), exePath);
Index: win32_threads.c
===================================================================
--- win32_threads.c	(revision 1849)
+++ win32_threads.c	(working copy)
@@ -711,8 +711,12 @@
 #     endif
       return;
     }
-    if (SuspendThread(t -> handle) == (DWORD)-1)
-      ABORT("SuspendThread failed");
+    if (SuspendThread(t -> handle) == (DWORD)-1) {
+	    // ABORT("SuspendThread failed");
+		t->stack_base = 0;
+		GC_delete_gc_thread(t);
+		return;
+	}
 # endif
    t -> suspended = TRUE;
 }
@@ -834,8 +838,10 @@
       } else {
         CONTEXT context;
         context.ContextFlags = CONTEXT_INTEGER|CONTEXT_CONTROL;
-        if (!GetThreadContext(thread -> handle, &context))
-	  ABORT("GetThreadContext failed");
+		if (!GetThreadContext(thread -> handle, &context)) {
+		  //ABORT("GetThreadContext failed");
+			return;
+		}
 
         /* Push all registers that might point into the heap.  Frame	*/
         /* pointer registers are included in case client code was	*/
@@ -1451,6 +1457,7 @@
 #       ifdef THREAD_LOCAL_ALLOC
 	  ABORT("Cannot initialize thread local cache from DllMain");
 #       endif
+	  if( sb.mem_base )
 	GC_register_my_thread_inner(&sb, thread_id);
     } /* o.w. we already did it during GC_thr_init(), called by GC_init() */
     break;
