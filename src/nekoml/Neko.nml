/*
 * Copyright (C)2005-2022 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
open Lexer;
open Neko.Ast;
open Nekoml.Type;

type comparison {
	Native;
	Structural;
}

type context {
	typectx : Nekoml.Typer.context;
	current : string list;
	module_name : string;
	imports : (string list,string) Hashtbl.t;
	mutable counter : int;
	mutable refvars : string Set.t;
}

function gen_label(ctx) {
	var c = ctx.counter;
	ctx.counter := ctx.counter + 1;
	"l" + string c
}

function gen_variable(ctx) {
	var c = ctx.counter;
	ctx.counter := ctx.counter + 1;
	"v" + string c
}

function module_name(m) {
	"@" + String.concat "_" m
}

function builtin(name) {
	(EConst (Builtin name) , null_pos)
}

function ident(name) {
	(EConst (Ident name) , null_pos)
}

function int(n) {
	(EConst (Int n) , null_pos)
}

var enull = (EConst Null , null_pos)

var core = ["Core"];

function record_index(f,t) {
	match tlinks false t {
	| TRecord fl ->
		function rec loop(i,l) {
			match l {
			| [] -> assert()
			| (ff,_,_) :: l ->
				if f == ff then i else loop (i+1) l
			}
		}
		loop 0 fl
	| _ ->
		assert()
	}
}

function construct_id(ctx,m,c) {
	var m = if m == [] then ctx.current else m;
	var mod = try Nekoml.Typer.module ctx.typectx m catch { Not_found -> assert() };
	var r = try Nekoml.Typer.union mod c catch { Not_found -> assert() };
	if r == t_error then
		Hashtbl.hash (c :: m)
	else match tlinks false r {
	| TUnion (_,fl) ->
		function rec loop(i,l) {
			match l {
			| [] -> assert()
			| (cc,_) :: l ->
				if c == cc then i else loop (i+1) l
			}
		}
		loop 0 fl
	| _ ->
		assert()
	}
}

function rec is_fun(t) {
	match t.texpr {
	| TNamed (_,_,t) | TLink t -> is_fun t
	| TPoly
	| TMono _
	| TFun _ -> true
	| _ -> false
	}
}

function call(ret,f,args,p) {
	if is_fun ret then
		(ECall (EConst (Builtin "apply"),p) (f :: args) , p)
	else
		(ECall f args , p)
}

function array(args,p) {
	(ECall (EConst (Builtin "array"),p) args , p)
}

function block(e) {
	match fst e {
	| EBlock _ -> e
	| _ -> (EBlock [e] , snd e)
	}
}

function rec arity(t) {
	match t.texpr {
	| TAbstract -> 0
	| TTuple tl -> List.length tl
	| TLink t -> arity t
	| _ -> 1
	}
}

function comparison(t) {
	match tlinks true t {
	| TNamed (["int"],[],_)
	| TNamed (["char"],[],_)
	| TNamed (["float"],[],_)
	| TNamed (["string"],[],_) -> Native
	| _ -> Structural
	}
}

function import(ctx,m,i,p) {
	if m == ctx.current then
		(EField ident(ctx.module_name) i,p)
	else {
		var key = i :: m;
		(EConst Ident(try {
			Hashtbl.find ctx.imports key
		} catch {
			Not_found ->
				var i = "@" + String.concat "_" m + "_" + i;
				Hashtbl.add ctx.imports key i;
				i
		}),p)
	}
}

function rec gen_constant(ctx,c,p) {
	(match c {
	| TVoid -> EConst Null
	| TInt n when n < 0 -> EBinop "-" int(0) int(-n)
	| TInt n -> EConst (Int n)
	| TFloat s -> EConst (Float s)
	| TChar c -> EConst Int(ord c)
	| TString s -> EConst (String s)
	| TIdent s ->
		if Set.exists ctx.refvars s then EArray ident(s) int(0) else EConst (Ident s)
	| TBool b -> EConst (if b then True else False)
	| TConstr "[]" | TModule (["Core"],TConstr "[]") -> fst (import ctx core "@empty" p)
	| TConstr "::" | TModule (["Core"],TConstr "::") -> fst (import ctx core "@cons" p)
	| TConstr s -> EConst (Ident s)
	| TModule ([],c) -> fst (gen_constant ctx c p)
	| TModule (m,c) ->
		fst (import ctx m (match c { TConstr x -> x | TIdent s -> s | _ -> assert() }) p)
	} , p)
}

type match_context {
	ctx : context;
	out : string;
	pos : pos;
	mutable cache : (match_op , string) list;
	mutable next : string;
	mutable first : bool;
}

var no_label = "<assert>"

function rec gen_match_rec(mctx,fail,next,m) {
	try
		ident (List.phys m mctx.cache)
	catch { Not_found ->
	var p = mctx.pos;
	var ctx = mctx.ctx;
	var gen_rec = gen_match_rec mctx;
	match m {
	| MFailure ->
		var label = if mctx.first && mctx.next != no_label then mctx.next else fail;
		if label == no_label then
			(EBlock [] , p)
		else
			call t_void (builtin "goto") [ident label] p
	| MHandle (m1,m2) ->
		var label = gen_label ctx;
		var m1 = gen_rec label true m1;
		var m2 = gen_rec fail next m2;
		(EBlock [m1; (ELabel label, p); m2] , p)
	| MRoot ->
		assert()
	| MExecute (e,b) ->
		if !b then {
			var ematch = (EBinop "==" ident("@exc") (import ctx core "Stream_error" p) , p);
			var stream_pos = (ECall (import ctx core "stream_pos" p) [gen_rec fail true MRoot] , p);
			var test = (EBinop "==" ident("@pos") stream_pos , p);
			var reraise = (EIf (EBinop "&&" ematch test,p) gen_rec(fail,true,MFailure) Some((ECall (builtin "rethrow") [ident "@exc"],p)) , p);
			mctx.first := false;
			match e.edecl {
			| TConst _ -> gen_expr ctx e
			| _ -> (ETry gen_expr(ctx,e) "@exc" reraise , p)
			}
		} else {
			mctx.first := true;
			if !next then
				gen_expr ctx e
			else {
				var out = call t_void (builtin "goto") [ident mctx.out] p;
				(EBlock [gen_expr ctx e;out] , p)
			}
		}
	| MConstants (m,[(TIdent v,m1)]) ->
		var m = gen_rec fail true m;
		(EBlock [
			(EVars [(v, Some m)] , p);
			gen_rec fail next m1
		] , p)
	| MConstants (m,cl) ->
		var e = gen_rec fail true m;
		var cases = List.map (function((c,m)) {
			(gen_constant ctx c p, gen_rec fail next m)
		}) cl;
		(ESwitch e cases Some(gen_rec fail next MFailure), p)
	| MRecordField (m,f,t) ->
		(EArray gen_rec(fail,true,m) int(record_index f t) , p)
	| MTuple (m,n) ->
		(EArray gen_rec(fail,true,m) int(n) , p)
	| MField (m,n) ->
		(EArray gen_rec(fail,true,m) int(n + 2) , p)
	| MNext (m1,m2) ->
		var old = mctx.next;
		var label = gen_label ctx;
		mctx.next := label;
		var m1 = gen_rec fail true m1;
		mctx.next := old;
		var m2 = gen_rec fail next m2;
		(EBlock [m1; (ELabel label, p); m2] , p)
	| MSwitch (m,cl) ->
		var e = (EArray (gen_rec fail true m) int(0) , p);
		var cases = List.map (function((c,m)) {
			var path , c = match c {
			| TModule (path,TConstr c) -> (path , c)
			| TConstr c -> (ctx.current,c)
			| _ ->
				assert()
			}
			(int(construct_id ctx path c), gen_rec fail next m)
		}) cl;
		(ESwitch e cases Some(gen_rec fail next MFailure), p)
	| MBind (v,m1,m2) ->
		var e1 = gen_rec fail true m1;
		var old = mctx.cache;
		mctx.cache := (m1,v) :: mctx.cache;
		var e2 = gen_rec fail next m2;
		mctx.cache := old;
		(EBlock [(EVars [(v, Some e1)] , p); e2] , p)
	| MWhen (e,m) ->
		var e = gen_expr ctx e;
		var m = gen_rec fail next m;
		var fail = gen_rec fail next MFailure;
		(EIf e m Some(fail), p)
	| MToken (m,n) ->
		call t_void (import ctx core "stream_token" p) [gen_rec fail true m; int n] p
	| MJunk (m,n,m2) ->
		var m = gen_rec fail true m;
		mctx.first := false;
		(EBlock [
			call t_void (import ctx core "stream_junk" p) [m; int n] p;
			gen_rec fail next m2
		] , p)
	}
	}
}

function rec gen_matching(ctx,v,m,p,stream,next,out) {
	var mctx = {
		ctx = ctx;
		cache = [(MRoot,v)];
		pos = p;
		out = out;
		first = stream;
		next = no_label;
	};
	var label = (if stream then gen_label ctx else no_label);
	var e = gen_match_rec mctx label next m;
	if stream then {
		var vpos = "@pos";
		var stream_pos = (ECall (import ctx core "stream_pos" p) [ident v] , p);
		var exc = (ECall builtin("throw") [import ctx core "Stream_error" p] , p);
		(EBlock [(EVars [(vpos , Some stream_pos)] , p); e; (ELabel label , p); exc] , p)
	} else
		e
}

function rec gen_match(ctx,e,m,stream,p) {
	var out = gen_label ctx;
	var v = gen_variable ctx;
	var m = gen_matching ctx v m p stream stream out;
	var m = (ENext (EVars [(v,Some e)],p) m, p);
	(EBlock [m; (ELabel out , p)] , p)
}

function rec gen_constructor(ctx,tname,c,id,t,p) {
	var field = ident c;
	var printer = (EConst Ident(tname + "__string"), p);
	function val_type(t) {
		match arity t {
		| 0 ->
			var make = array [int id;printer] p;
			(EBinop "="  field make , p)
		| n ->
			var args = Array.list (Array.init n (function(n) { "p" + string n }));
			var build = array (int id :: printer :: List.map (function(a) { (EConst (Ident a) , p) }) args) p;
			var func = (EFunction args (EBlock [(EReturn (Some build),p)] , p) , p);
			(EBinop "=" field func , p)
		}
	}
	var export = (EBinop "=" (EField ident(ctx.module_name) c,p) field , p);
	(ENext val_type(t) export , p)
}

function rec gen_type_printer(ctx,c,t,p) {
	var printer = mk TConst(TModule ["Core"] TIdent("@print_union")) t_void p;
	var e = mk (TCall printer [
		mk TConst(TString c) t_string p;
		mk TConst(TIdent "v") t_void p
	]) t_string p;
	e
}

function rec gen_type(ctx,name,t,p) {
	match t.texpr {
	| TAbstract
	| TMono _
	| TPoly
	| TRecord _
	| TTuple _
	| TFun _
	| TNamed (_,_,{ texpr = TNamed _ }) ->
		(EBlock [] , p)
	| TLink t ->
		gen_type ctx name t p
	| TNamed (name,_,t) ->
		function rec loop(l) {
			match l {
			| [] -> assert()
			| [x] -> x
			| _ :: l -> loop l
			}
		}
		gen_type ctx (loop name) t p
	| TUnion (_,constrs) ->
		var cmatch = gen_match ctx (ident "v") (MSwitch MRoot (List.map (function((c,t)) {
			var e = gen_type_printer ctx c t p;
			(TConstr c , MExecute e true)
		}) constrs)) false p;
		var printer = (EFunction ["v"] cmatch , p);
		var i = &(-1);
		var regs = List.map (function((c,t)) { i := *i + 1; gen_constructor ctx name c (*i) t p }) constrs;
		(EBlock ((EVars [(name + "__string",Some printer)],p) :: regs) , p)
	}
}

function rec gen_binop(ctx,op,e1,e2,p) {
	function compare(op) {
		var cmp = (ECall (import ctx core "@compare" p) [gen_expr ctx e1; gen_expr ctx e2] , p);
		(EBinop op cmp int(0) , p)
	}
	function make(op) {
		(EBinop op gen_expr(ctx,e1) gen_expr(ctx,e2) , p)
	}
	function builtin2(op) {
		(ECall (builtin op) [gen_expr ctx e1; gen_expr ctx e2] , p)
	}
	match op {
	| "and" -> make "&"
	| "or" -> make "|"
	| "xor" -> make "+"
	| "==" | "!=" | ">" | "<" | ">=" | "<=" ->
		match comparison e1.etype {
		| Structural -> compare op
		| Native -> make op
		}
	| "===" -> (EBinop "==" builtin2("pcompare") int(0) , p)
	| "!==" -> (EBinop "!=" builtin2("pcompare") int(0) , p)
	| ":=" ->
		match e1.edecl {
		| TField _ -> make "="
		| TArray (a,i) ->
			(ECall (import ctx core "@aset" p) [gen_expr ctx a; gen_expr ctx i; gen_expr ctx e2] , p)
		| _ ->
			(EBinop "=" (EArray gen_expr(ctx,e1) int(0),e1.epos) gen_expr(ctx,e2) , p)
		}
	| "/" when is_int e1.etype && is_int e2.etype ->
		builtin2 "idiv"
	| _ ->
		make op
	}
}

function rec gen_call(ctx,rt,e,el,p) {
	match e.edecl {
	| TConst (TIdent "neko")
	| TConst (TModule ([],TIdent "neko"))
	| TConst (TModule (["Core"],TIdent "neko")) ->
		match el {
		| [{ edecl = TConst (TString s) }] ->
			var ch = IO.read_string (String.concat "\"" (String.split s "'"));
			var lex = Lexer.create Buffer.create();
			Lexer.input lex p.psource ch p.pline p.pmin;
			fst (Neko.Parser.parse lex)
		| _ ->
			assert()
		}
	| TConst (TConstr "::")
	| TConst (TModule ([],TConstr "::"))
	| TConst (TModule (["Core"],TConstr "::")) ->
		match el {
		| [e1;e2] -> ECall (EConst (Builtin "array"),p) [int 1;import ctx core "@pcons" p;gen_expr ctx e1;gen_expr ctx e2]
		| _ -> assert()
		}
	| _ ->
		fst (call rt (gen_expr ctx e) (List.map (gen_expr ctx) el) p)
	}
}

function rec gen_expr(ctx,e) {
	var p = e.epos;
	var e = match e.edecl {
	| TConst c -> fst (gen_constant ctx c p)
	| TBlock el -> EBlock (gen_block ctx el p)
	| TParenthesis e -> EParenthesis (gen_expr ctx e)
	| TCall (f,el) -> gen_call ctx e.etype f el p
	| TField (e,s) -> EArray gen_expr(ctx,e) int(record_index s e.etype)
	| TArray (e1,e2) ->
		ECall (import ctx core "@aget" p) [gen_expr ctx e1;gen_expr ctx e2]
	| TVar ([v],e) ->
		ctx.refvars := Set.remove ctx.refvars v;
		EVars [(v , Some (gen_expr ctx e))]
	| TVar (vl,e) ->
		var n = &(-1);
		EVars (("@tmp" , Some (gen_expr ctx e)) :: List.map (function(v) {
			ctx.refvars := Set.remove ctx.refvars v;
			n := *n + 1;
			(v , Some (EArray ident("@tmp") int(*n),p))
		}) vl)
	| TIf (e,e1,e2) -> EIf (gen_expr ctx e) (gen_expr ctx e1) (match e2 { None -> None | Some e2 -> Some (gen_expr ctx e2) })
	| TWhile (e1,e2) -> EWhile (gen_expr ctx e1) (gen_expr ctx e2) NormalWhile
	| TFunction (rflag,name,params,code) ->
		if name == "_" then
			EFunction (List.map fst params) block(gen_expr ctx code)
		else if !rflag then
			EVars [(name , Some (EFunction (List.map fst params) block(gen_expr ctx code), p))]
		else
			EBlock [gen_functions ctx [e] p]
	| TBinop (op,e1,e2) -> fst (gen_binop ctx op e1 e2 p)
	| TTupleDecl tl -> fst (array (List.map (gen_expr ctx) tl) p)
	| TTypeDecl t -> fst (gen_type ctx "<assert>" t p)
	| TMut e -> fst (gen_expr ctx (*e))
	| TRecordDecl fl ->
		var fl = List.sort (function((f1,_),(f2,_)) { compare (record_index f1 e.etype) (record_index f2 e.etype)}) fl;
		fst(array (List.map (function((_,e)) { gen_expr ctx e }) fl) p)
	| TListDecl el ->
		fst (match el {
		| [] -> array [] p
		| x :: l ->
			array [gen_expr ctx x; gen_expr ctx (mk TListDecl(l) e.etype p)] p
		})
	| TUnop (op,e) ->
		match op {
		| "-" -> EBinop "-" int(0) gen_expr(ctx,e)
		| "*" -> EArray gen_expr(ctx,e) int(0)
		| "!" -> fst (call t_void (builtin "not") [gen_expr ctx e] p)
		| "&" -> fst (array [gen_expr ctx e] p)
		| _ -> assert()
		}
	| TMatch (e,m,stream) ->
		fst (gen_match ctx (gen_expr ctx e) m stream p)
	| TTupleGet (e,n) ->
		EArray (gen_expr ctx e) int(n)
	| TErrorDecl (e,t) ->
		var printer = gen_expr ctx (gen_type_printer ctx e t p);
		var printer = (EFunction ["v"] (EBlock [printer],p) , p);
		var printer = (EVars [(e + "__string",Some printer)] , p);
		ENext printer (gen_constructor ctx e e (Hashtbl.hash (e :: ctx.current)) t p)
	| TTry (e,m) ->
		var out = gen_label ctx;
		var not_exc = (EBinop "!=" (call t_void (builtin "typeof") [ident "@exc"] p) builtin("tarray"),p);
		var type_check = (EIf not_exc (EBinop "=" ident("@exc") (call t_void (import ctx core "Neko_error" p) [ident "@exc"] p),p) None,p);
		var matching = gen_matching ctx "@exc" m p false true out;
		var reraise = call t_void (builtin "rethrow") [ident "@exc"] p;
		var handle = (EBlock [type_check; matching; reraise;(ELabel out , p)] , p);
		ETry (gen_expr ctx e) "@exc" handle
	};
	(e,p)
}

function rec gen_functions(ctx,fl,p) {
	var ell = &(EVars (List.map (function(e) {
		match e.edecl {
		| TFunction (_,"_",params,e) ->
			("_" , Some (EFunction (List.map fst params) block(gen_expr ctx e),p))
		| TFunction (_,name,_,_) ->
			ctx.refvars := Set.add ctx.refvars name;
			(name , Some (array [enull] p))
		| _ ->
			assert()
		}
	}) fl) , p);
	List.iter (function(e) {
		var p = e.epos;
		match e.edecl {
		| TFunction (_,name,params,e) ->
			if name != "_" then {
				var e = gen_expr ctx e;
				var e = (EFunction (List.map fst params) block(e) , p);
				var e = (EBinop "=" (EArray ident(name) int(0),p) e, p);
				var e = (EBlock [e; (EBinop "=" ident(name) (EArray ident(name) int(0),p) , p)] , p);
				ell := (ENext (*ell) e , p);
				ctx.refvars := Set.remove ctx.refvars name;
			}
		| _ ->
			assert()
		}
	}) fl;
	*ell
}

function rec gen_block(ctx,el,p) {
	var old = ctx.refvars;
	var ell = &[];
	function rec loop(fl,l) {
		match l {
		| [] -> if fl != [] then ell := gen_functions ctx (List.rev fl) p :: *ell
		| ({ edecl = TFunction (true,name,p,f) } as e) :: l -> loop (e :: fl) l
		| { edecl = TMut r } :: l -> loop fl ((*r) :: l)
		| x :: l ->
			if fl != [] then ell := gen_functions ctx (List.rev fl) p :: *ell;
			ell := gen_expr ctx x :: *ell;
			loop [] l
		}
	}
	loop [] el;
	ctx.refvars := old;
	List.rev (*ell)
}

function generate(tctx,e,deps,idents,mod) {
	var m = module_name mod;
	var ctx = {
		typectx = tctx;
		current = mod;
		module_name = m;
		counter = 0;
		imports = Hashtbl.create();
		refvars = Set.empty();
	};
	var p = e.epos;
	var init = (EBinop "=" ident(m) builtin("exports") , p);
	var deps = List.map (function(m) {
		var file = file_name m "";
		var load = (ECall (EField builtin("loader") "loadmodule",p) [gen_constant ctx (TString file) p;builtin "loader"] , p);
		(EBinop "=" ident(module_name m) load , p)
	}) deps;
	var exports = List.map (function(i) {
		(EBinop "=" (EField builtin("exports") i,p) ident(i) , p)
	}) idents;
	var el = match gen_expr ctx e {
	| (EBlock el, _) -> el
	| e -> [e]
	}
	var imports = &[];
	Hashtbl.iter (function(key,id) {
		var e = match key {
			| [] -> assert()
			| i :: m ->
				(EBinop "=" ident(id) (EField ident(module_name m) i , p) , p)
		}
		imports := e :: *imports;
	}) ctx.imports;
	(EBlock (List.append (init :: List.append deps (*imports)) (List.append el exports)) , e.epos)
}
